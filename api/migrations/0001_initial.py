# Generated by Django 2.1.7 on 2019-03-27 05:15

import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
from django.utils.timezone import utc


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Class',
            fields=[
                ('id', models.AutoField(editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=50)),
                ('semester', models.CharField(choices=[('FL', 'Fall'), ('SP', 'Spring'), ('SM', 'Summer')], default='FL', max_length=2)),
                ('section', models.IntegerField()),
                ('year', models.IntegerField(default=2019)),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('admin', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('title',),
                'verbose_name_plural': 'Classes',
            },
        ),
        migrations.CreateModel(
            name='ClassEnrollment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('class_enrolled', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Class')),
            ],
            options={
                'verbose_name_plural': 'Class Enrollments',
            },
        ),
        migrations.CreateModel(
            name='DayLookup',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=10)),
            ],
            options={
                'verbose_name_plural': 'Days',
            },
        ),
        migrations.CreateModel(
            name='Demographic',
            fields=[
                ('id', models.AutoField(editable=False, primary_key=True, serialize=False)),
                ('age', models.IntegerField()),
                ('major', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='EthnicityLookup',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.AutoField(editable=False, primary_key=True, serialize=False)),
                ('feedback', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='GenderLookup',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=25)),
            ],
        ),
        migrations.CreateModel(
            name='GradeYearLookup',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=25)),
            ],
        ),
        migrations.CreateModel(
            name='Position',
            fields=[
                ('id', models.AutoField(editable=False, primary_key=True, serialize=False)),
                ('timestamp', models.DateTimeField(default=datetime.datetime(2019, 3, 27, 5, 15, 55, 521877, tzinfo=utc))),
                ('x', models.FloatField()),
                ('y', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='RaceLookup',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Session',
            fields=[
                ('id', models.AutoField(editable=False, primary_key=True, serialize=False)),
                ('timestamp', models.DateTimeField(default=datetime.datetime(2019, 3, 27, 5, 15, 55, 372288, tzinfo=utc), editable=False)),
                ('expires', models.DateTimeField(default=datetime.datetime(2019, 3, 28, 5, 15, 55, 518872, tzinfo=utc))),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('reset_password_code', models.CharField(blank=True, max_length=6, null=True)),
                ('id', models.AutoField(editable=False, primary_key=True, serialize=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('user__last_name', 'user__first_name'),
            },
        ),
        migrations.CreateModel(
            name='Survey',
            fields=[
                ('id', models.AutoField(editable=False, primary_key=True, serialize=False)),
                ('admin', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
                ('associated_class', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='api.Class')),
            ],
        ),
        migrations.CreateModel(
            name='SurveyQuestion',
            fields=[
                ('id', models.AutoField(editable=False, primary_key=True, serialize=False)),
                ('type', models.CharField(choices=[('SA', 'Short Answer'), ('LA', 'Essay'), ('RA', 'Range')], default='SA', max_length=2)),
                ('prompt_text', models.TextField()),
                ('survey', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='api.Survey')),
            ],
        ),
        migrations.CreateModel(
            name='SurveyResponse',
            fields=[
                ('id', models.AutoField(editable=False, primary_key=True, serialize=False)),
                ('response', models.TextField()),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='api.Student')),
                ('survey_question', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='api.SurveyQuestion')),
            ],
        ),
        migrations.AddField(
            model_name='position',
            name='student',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Student'),
        ),
        migrations.AddField(
            model_name='demographic',
            name='ethnicity',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.EthnicityLookup'),
        ),
        migrations.AddField(
            model_name='demographic',
            name='gender',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.GenderLookup'),
        ),
        migrations.AddField(
            model_name='demographic',
            name='grade_year',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.GradeYearLookup'),
        ),
        migrations.AddField(
            model_name='demographic',
            name='race',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.RaceLookup'),
        ),
        migrations.AddField(
            model_name='demographic',
            name='student',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='api.Student'),
        ),
        migrations.AddField(
            model_name='classenrollment',
            name='student',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Student'),
        ),
        migrations.AddField(
            model_name='class',
            name='days_of_the_week',
            field=models.ManyToManyField(to='api.DayLookup'),
        ),
        migrations.AlterUniqueTogether(
            name='classenrollment',
            unique_together={('student', 'class_enrolled')},
        ),
        migrations.AlterUniqueTogether(
            name='class',
            unique_together={('title', 'semester', 'year')},
        ),
    ]
